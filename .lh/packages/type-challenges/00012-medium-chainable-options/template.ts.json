{
    "sourceFile": "packages/type-challenges/00012-medium-chainable-options/template.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 54,
            "patches": [
                {
                    "date": 1659796720376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1659796746150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,1 @@\n-type Chainable = 1\n\\ No newline at end of file\n+type Chainable = string\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659796805092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,3 @@\n-type Chainable = string\n\\ No newline at end of file\n+interface Chainable{\n+    \n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659796858125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,3 +1,3 @@\n interface Chainable{\n-    \n+    option(key, value):()=>{}\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659796881130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,3 +1,4 @@\n interface Chainable{\n-    option(key, value):()=>{}\n+    option(key, value):Fn<key,value>\n+    get():any\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659796909747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+type fn<K,V> = (key: K, value: V) => Chainable\n interface Chainable{\n-    option(key, value):Fn<key,value>\n+    option(key, value):fn<key,value>\n     get():any\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659796939084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-type fn<K,V> = (key: K, value: V) => Chainable\n+\n interface Chainable{\n-    option(key, value):fn<key,value>\n+    option(key, value)\n     get():any\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659797001345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n \n interface Chainable{\n-    option(key, value)\n+    option<K,V>(key, value)\n     get():any\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659797025139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n \n interface Chainable{\n-    option<K,V>(key, value)\n+    option<K,V>(key, value):any\n     get():any\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659797114741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n \n interface Chainable{\n-    option<K,V>(key, value):any\n+    option<K,V>(key, value):string\n+\n     get():any\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659797123395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n \n interface Chainable{\n-    option<K,V>(key, value):string\n-\n+    option<K,V>(key, value):any\n+    \n     get():any\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659797233801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n+type Fn<K,V> = any\n \n+\n interface Chainable{\n-    option<K,V>(key, value):any\n+    option<K,V>(key, value):Fn<K,V>\n     \n     get():any\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659797259304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n-type Fn<K,V> = any\n+type Fn<K,V> = K\n \n \n interface Chainable{\n-    option<K,V>(key, value):Fn<K,V>\n+    option<K,V>(key:K, value:V):Fn<K,V>\n     \n     get():any\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659797272833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-type Fn<K,V> = K\n+type Fn<K,V> = 'hello'\n \n \n interface Chainable{\n     option<K,V>(key:K, value:V):Fn<K,V>\n"
                },
                {
                    "date": 1659797284326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-type Fn<K,V> = 'hello'\n+type Fn<K,V> = V\n \n \n interface Chainable{\n     option<K,V>(key:K, value:V):Fn<K,V>\n"
                },
                {
                    "date": 1659797322849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,7 @@\n-type Fn<K,V> = V\n+type Fn<K,V> = {\n+    [key: string]: V\n+}\n \n \n interface Chainable{\n     option<K,V>(key:K, value:V):Fn<K,V>\n"
                },
                {
                    "date": 1659797412026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n type Fn<K,V> = {\n-    [key: string]: V\n+    [key: string]:123\n }\n \n \n interface Chainable{\n"
                },
                {
                    "date": 1659797424023,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,5 @@\n-type Fn<K,V> = {\n-    [key: string]:123\n-}\n+type Fn<K,V> = 1\n \n \n interface Chainable{\n     option<K,V>(key:K, value:V):Fn<K,V>\n"
                },
                {
                    "date": 1659797442785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-type Fn<K,V> = 1\n+type Fn<K,V> = {K:V}\n \n \n interface Chainable{\n     option<K,V>(key:K, value:V):Fn<K,V>\n"
                },
                {
                    "date": 1659797448163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-type Fn<K,V> = {K:V}\n+type Fn<K,V> = {K:typeof V}\n \n \n interface Chainable{\n     option<K,V>(key:K, value:V):Fn<K,V>\n"
                },
                {
                    "date": 1659797455276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-type Fn<K,V> = {K:typeof V}\n+type Fn<K,V> = {K: V}\n \n \n interface Chainable{\n     option<K,V>(key:K, value:V):Fn<K,V>\n"
                },
                {
                    "date": 1659797497035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-type Fn<K,V> = {K: V}\n+type Fn<K,V> = {K,V}\n \n \n interface Chainable{\n     option<K,V>(key:K, value:V):Fn<K,V>\n"
                },
                {
                    "date": 1659797519410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-type Fn<K,V> = {K,V}\n+type Fn<K,V> = {}\n \n \n interface Chainable{\n     option<K,V>(key:K, value:V):Fn<K,V>\n"
                },
                {
                    "date": 1659797528796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-type Fn<K,V> = {}\n+type Fn<K,V> = K\n \n \n interface Chainable{\n     option<K,V>(key:K, value:V):Fn<K,V>\n"
                },
                {
                    "date": 1659797610519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n type Fn<K,V> = K\n \n \n interface Chainable{\n-    option<K,V>(key:K, value:V):Fn<K,V>\n+    option<V>(key,value:V):Fn<K,V>\n     \n     get():any\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659797642349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n type Fn<K,V> = K\n \n \n interface Chainable{\n-    option<V>(key,value:V):Fn<K,V>\n+    option<K,V>(key:K, value:V):Fn<K,V>\n     \n     get():any\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659797675845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n type Fn<K,V> = K\n \n \n interface Chainable{\n-    option<K,V>(key:K, value:V):Fn<K,V>\n+    option<K,V>(key:K, value:typeof V):Fn<K,V>\n     \n     get():any\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659797685706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n type Fn<K,V> = K\n \n \n interface Chainable{\n-    option<K,V>(key:K, value:typeof V):Fn<K,V>\n+    option<K,V>(key:K, value:V):Fn<K,V>\n     \n     get():any\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659797785422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,17 @@\n type Fn<K,V> = K\n \n \n interface Chainable{\n-    option<K,V>(key:K, value:V):Fn<K,V>\n+    option<K extends strirng,V>(key:K, value:V):Fn<K,V>\n     \n     get():any\n\\ No newline at end of file\n-}\n+}\n+\n+// your answers\n+type Chainable<T = {}> = {\n+    option: <K extends string, V>(key: K extends keyof T ? \n+        V extends T[K] ? never : K \n+        : K, \n+        value: V) => Chainable<Omit<T, K> & Record<K, V>>,\n+    get: () => T;\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659797817687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n type Fn<K,V> = K\n \n \n interface Chainable{\n-    option<K extends strirng,V>(key:K, value:V):Fn<K,V>\n+    option<K extends string,V>(key:K extends keyof T, value:V):Fn<K,V>\n     \n     get():any\n }\n \n"
                },
                {
                    "date": 1659797835938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n type Fn<K,V> = K\n \n \n-interface Chainable{\n+interface Chainable<T = {}>{\n     option<K extends string,V>(key:K extends keyof T, value:V):Fn<K,V>\n     \n     get():any\n }\n"
                },
                {
                    "date": 1659797843134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n type Fn<K,V> = K\n \n \n-interface Chainable<T = {}>{\n+interface Chainable{\n     option<K extends string,V>(key:K extends keyof T, value:V):Fn<K,V>\n     \n     get():any\n }\n"
                },
                {
                    "date": 1659797885957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,5 @@\n-type Fn<K,V> = K\n \n-\n-interface Chainable{\n-    option<K extends string,V>(key:K extends keyof T, value:V):Fn<K,V>\n-    \n-    get():any\n-}\n-\n // your answers\n type Chainable<T = {}> = {\n     option: <K extends string, V>(key: K extends keyof T ? \n         V extends T[K] ? never : K \n"
                },
                {
                    "date": 1659798080706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,13 @@\n+type Fn<K,V> = K\n \n+\n+interface Chainable{\n+    option<K extends string,V>(key:K extends keyof T, value:V):Fn<K,V>\n+    \n+    get():any\n+}\n+\n // your answers\n type Chainable<T = {}> = {\n     option: <K extends string, V>(key: K extends keyof T ? \n         V extends T[K] ? never : K \n"
                },
                {
                    "date": 1659798087726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,16 +2,15 @@\n \n \n interface Chainable{\n     option<K extends string,V>(key:K extends keyof T, value:V):Fn<K,V>\n-    \n     get():any\n }\n \n // your answers\n-type Chainable<T = {}> = {\n-    option: <K extends string, V>(key: K extends keyof T ? \n-        V extends T[K] ? never : K \n-        : K, \n-        value: V) => Chainable<Omit<T, K> & Record<K, V>>,\n-    get: () => T;\n-};\n\\ No newline at end of file\n+// type Chainable<T = {}> = {\n+//     option: <K extends string, V>(key: K extends keyof T ? \n+//         V extends T[K] ? never : K \n+//         : K, \n+//         value: V) => Chainable<Omit<T, K> & Record<K, V>>,\n+//     get: () => T;\n+// };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659798096988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,12 @@\n type Fn<K,V> = K\n \n \n interface Chainable{\n-    option<K extends string,V>(key:K extends keyof T, value:V):Fn<K,V>\n+    option<K extends string,V>(key:K , value:V):Fn<K,V>\n     get():any\n }\n \n-// your answers\n // type Chainable<T = {}> = {\n //     option: <K extends string, V>(key: K extends keyof T ? \n //         V extends T[K] ? never : K \n //         : K, \n"
                },
                {
                    "date": 1659798108384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,15 @@\n type Fn<K,V> = K\n \n \n interface Chainable{\n-    option<K extends string,V>(key:K , value:V):Fn<K,V>\n+    option<K extends string,V>(key:K, value:V):Fn<K,V>\n     get():any\n }\n \n-// type Chainable<T = {}> = {\n-//     option: <K extends string, V>(key: K extends keyof T ? \n-//         V extends T[K] ? never : K \n-//         : K, \n-//         value: V) => Chainable<Omit<T, K> & Record<K, V>>,\n-//     get: () => T;\n\\ No newline at end of file\n-// };\n+type Chainable<T = {}> = {\n+    option: <K extends string, V>(key: K extends keyof T ? \n+        V extends T[K] ? never : K \n+        : K, \n+        value: V) => Chainable<Omit<T, K> & Record<K, V>>,\n+    get: () => T;\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1659798122727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,5 @@\n-type Fn<K,V> = K\n \n-\n-interface Chainable{\n-    option<K extends string,V>(key:K, value:V):Fn<K,V>\n-    get():any\n-}\n-\n type Chainable<T = {}> = {\n     option: <K extends string, V>(key: K extends keyof T ? \n         V extends T[K] ? never : K \n         : K, \n"
                },
                {
                    "date": 1659798181404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,5 +4,6 @@\n         V extends T[K] ? never : K \n         : K, \n         value: V) => Chainable<Omit<T, K> & Record<K, V>>,\n     get: () => T;\n-};\n\\ No newline at end of file\n+};\n+\n"
                },
                {
                    "date": 1659798395923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,4 +6,19 @@\n         value: V) => Chainable<Omit<T, K> & Record<K, V>>,\n     get: () => T;\n };\n \n+// ts Omit 作用：排除掉指定的key\n+// type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n+\n+// ts Pick 作用：指定的key\n+// type Pick<T, K extends keyof T> = { [P in K]: T[P] };\n+\n+// ts Record 作用：指定的key和value\n+// type Record<K extends keyof any, T> = { [P in K]: T };\n+\n+// ts Exclude 作用：排除掉指定的key\n+// type Exclude<T, U> = T extends U ? never : T;\n+\n+// ts keyof any 作用：指定的key\n+// type keyof any = { [key: string]: any } extends { [key: string]: infer T } ? T : never;\n+\n"
                },
                {
                    "date": 1659798513017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,25 @@\n };\n \n // ts Omit 作用：排除掉指定的key\n // type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n+/*\n+type Person = {\n+    name: string;\n+    age: string;\n+    location: string;\n+};\n \n+type PersonWithoutLocation = Omit<Person, 'location'>;\n+\n+// PersonWithoutLocation equal to QuantumPerson\n+type QuantumPerson = {\n+    name: string;\n+    age: string;\n+};\n+*/\n+\n+\n // ts Pick 作用：指定的key\n // type Pick<T, K extends keyof T> = { [P in K]: T[P] };\n \n // ts Record 作用：指定的key和value\n"
                },
                {
                    "date": 1659798558638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,11 +25,15 @@\n };\n */\n \n \n-// ts Pick 作用：指定的key\n+// ts Pick 作用：拣选属性，将 Type 的部分类型 Keys 挑出来，返回这部分类型。\n // type Pick<T, K extends keyof T> = { [P in K]: T[P] };\n \n+\n+\n+\n+\n // ts Record 作用：指定的key和value\n // type Record<K extends keyof any, T> = { [P in K]: T };\n \n // ts Exclude 作用：排除掉指定的key\n"
                },
                {
                    "date": 1659798768745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,17 @@\n \n \n // ts Pick 作用：拣选属性，将 Type 的部分类型 Keys 挑出来，返回这部分类型。\n // type Pick<T, K extends keyof T> = { [P in K]: T[P] };\n+/*\n+type Person = {\n+    name: string;\n+    age: string;\n+    location: string;\n+};\n \n+type PersonWithoutLocation = Pick<Person, Exclude<'name' | 'age' | 'location', 'location'>>;\n+*/\n \n \n \n \n"
                },
                {
                    "date": 1659798806727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,12 +39,24 @@\n */\n \n \n \n-\n // ts Record 作用：指定的key和value\n // type Record<K extends keyof any, T> = { [P in K]: T };\n+/*\n+interface PageInfo {\n+  title: string;\n+}\n \n+type Page = \"home\" | \"about\" | \"contact\";\n+\n+const nav: Record<Page, PageInfo> = {\n+  about: { title: \"about\" },\n+  contact: { title: \"contact\" },\n+  home: { title: \"home\" },\n+};\n+*/\n+\n // ts Exclude 作用：排除掉指定的key\n // type Exclude<T, U> = T extends U ? never : T;\n \n // ts keyof any 作用：指定的key\n"
                },
                {
                    "date": 1659799041230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,17 @@\n \n-type Chainable<T = {}> = {\n-    option: <K extends string, V>(key: K extends keyof T ? \n-        V extends T[K] ? never : K \n-        : K, \n-        value: V) => Chainable<Omit<T, K> & Record<K, V>>,\n-    get: () => T;\n-};\n+// type Chainable<T = {}> = {\n+//     option: <K extends string, V>(key: K extends keyof T ? \n+//         V extends T[K] ? never : K \n+//         : K, \n+//         value: V) => Chainable<Omit<T, K> & Record<K, V>>,\n+//     get: () => T;\n+// };\n \n+type Chainable = {\n+    option: <K extends string, V>() => Record(K, V);\n+}\n+\n // ts Omit 作用：排除掉指定的key\n // type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n /*\n type Person = {\n"
                },
                {
                    "date": 1659799069340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n //     get: () => T;\n // };\n \n type Chainable = {\n-    option: <K extends string, V>() => Record(K, V);\n+    option: <K extends string, V>() = > Record(K, V);\n }\n \n // ts Omit 作用：排除掉指定的key\n // type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n"
                },
                {
                    "date": 1659799096757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n //     get: () => T;\n // };\n \n type Chainable = {\n-    option: <K extends string, V>() = > Record(K, V);\n+    option: <K extends string, V>(key:K,value:V)=> Record(K, V);\n }\n \n // ts Omit 作用：排除掉指定的key\n // type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n"
                },
                {
                    "date": 1659799109756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n //     get: () => T;\n // };\n \n type Chainable = {\n-    option: <K extends string, V>(key:K,value:V)=> Record(K, V);\n+    option: <K extends string, V>(key:K,value:V)=> Record<K, V>;\n }\n \n // ts Omit 作用：排除掉指定的key\n // type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n"
                },
                {
                    "date": 1659800008482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n //     get: () => T;\n // };\n \n type Chainable = {\n-    option: <K extends string, V>(key:K,value:V)=> Record<K, V>;\n+    option: <K extends string, V>(key:K,value:V)=> <Omit<T, K> & Record<K, V>;\n }\n \n // ts Omit 作用：排除掉指定的key\n // type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n"
                },
                {
                    "date": 1659800016516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n //     get: () => T;\n // };\n \n type Chainable = {\n-    option: <K extends string, V>(key:K,value:V)=> <Omit<T, K> & Record<K, V>;\n+    option: <K extends string, V>(key:K,value:V)=> Omit<K,V> & Record<K, V>;\n }\n \n // ts Omit 作用：排除掉指定的key\n // type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n"
                },
                {
                    "date": 1659800032878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n //     get: () => T;\n // };\n \n type Chainable = {\n-    option: <K extends string, V>(key:K,value:V)=> Omit<K,V> & Record<K, V>;\n+    option: <K extends string, V>(key:K,value:V)=>  Record<K, V>;\n }\n \n // ts Omit 作用：排除掉指定的key\n // type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n"
                },
                {
                    "date": 1659800292487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n //     get: () => T;\n // };\n \n type Chainable = {\n-    option: <K extends string, V>(key:K,value:V)=>  Record<K, V>;\n+    option: <K extends string, V>(key:K,value:V)=> Chainable<Omit<T,K> & Record<K,V>>,\n }\n \n // ts Omit 作用：排除掉指定的key\n // type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n"
                },
                {
                    "date": 1659800307119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n //         value: V) => Chainable<Omit<T, K> & Record<K, V>>,\n //     get: () => T;\n // };\n \n-type Chainable = {\n+type Chainable<T = {}> = {\n     option: <K extends string, V>(key:K,value:V)=> Chainable<Omit<T,K> & Record<K,V>>,\n }\n \n // ts Omit 作用：排除掉指定的key\n"
                },
                {
                    "date": 1659800466889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,11 @@\n //     get: () => T;\n // };\n \n type Chainable<T = {}> = {\n-    option: <K extends string, V>(key:K,value:V)=> Chainable<Omit<T,K> & Record<K,V>>,\n+    option: <K extends string, V>(key:K extends keyof T ? \n+                V extends T[K] ? never : K \n+                : K,value:V)=> Chainable<Omit<T,K> & Record<K,V>>,\n }\n \n // ts Omit 作用：排除掉指定的key\n // type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n"
                },
                {
                    "date": 1659800482773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n type Chainable<T = {}> = {\n     option: <K extends string, V>(key:K extends keyof T ? \n                 V extends T[K] ? never : K \n                 : K,value:V)=> Chainable<Omit<T,K> & Record<K,V>>,\n+    get:()=>T\n }\n \n // ts Omit 作用：排除掉指定的key\n // type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n"
                }
            ],
            "date": 1659796720376,
            "name": "Commit-0",
            "content": "type Chainable = 1"
        }
    ]
}